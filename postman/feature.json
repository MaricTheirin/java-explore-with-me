{
  "info": {
    "_postman_id": "0716f0ed-a5b0-4cd3-ad2a-a12818486566",
    "name": "feature_comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "25183582"
  },
  "item": [
    {
      "name": "Event owner create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.environment.set(\"eventOwnerId\", pm.response.json().id);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\":\"test_user_1\",\r\n    \"email\":\"test_user_1@server.com\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event participator create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.environment.set(\"participator1Id\", pm.response.json().id);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\":\"participator_1\",\r\n    \"email\":\"participator_1@server.com\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event participator_2 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.environment.set(\"participator2Id\", pm.response.json().id);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\":\"participator_2\",\r\n    \"email\":\"participator_2@server.com\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Category create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.environment.set(\"categoryId\", pm.response.json().id);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\":\"Category_1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/categories",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    pm.environment.set(\"eventId\", pm.response.json().id);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"annotation\":\"Аннотация\",\r\n    \"category\":{{categoryId}},\r\n    \"description\":\"Описание события\",\r\n    \"eventDate\":\"2023-08-01 10:00:00\",\r\n    \"location\": {\r\n        \"lat\":\"0\",\r\n        \"lon\":\"0\"\r\n    },\r\n    \"paid\":\"false\",\r\n    \"participantLimit\":\"0\",\r\n    \"requestModeration\":\"false\",\r\n    \"title\":\"Наименование\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{eventOwnerId}}/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{eventOwnerId}}",
            "events"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event publish",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/events/{{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            "{{eventId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment get before create fail",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator1Id}}/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator1Id}}",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment create by initiator fail",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"Комментарий_пользователя_{{eventOwnerId}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{eventOwnerId}}/comments?eventId={{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{eventOwnerId}}",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment create by non-participant fail",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"Комментарий_пользователя_{{participator1Id}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator1Id}}/comments?eventId={{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator1Id}}",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Request create by participator_1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator1Id}}/requests?eventId={{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator1Id}}",
            "requests"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Request create by participator_2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator2Id}}/requests?eventId={{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator2Id}}",
            "requests"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment create by participator_1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.environment.set(\"comment1Id\", pm.response.json().id);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'created' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Комментарий_пользователя_' + pm.variables.get('participator1Id') + '\"').to.eql('Комментарий_пользователя_'.concat(pm.variables.get('participator1Id')));\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'isUpdated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.isUpdated, '\"isUpdated\" must be \"false\"').to.eql(false);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'updated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('updated');\r",
              "    pm.expect(jsonData.updated, '\"updated\" must equals \"created\" field').to.eql(jsonData.created);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'author' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData.author, '\"author\" field must be \"participator_1\"').to.eql('participator_1');  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"Комментарий_пользователя_{{participator1Id}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator1Id}}/comments?eventId={{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator1Id}}",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment create by participator_2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.environment.set(\"comment2Id\", pm.response.json().id);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'created' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Комментарий_пользователя_' + pm.variables.get('participator2Id') + '\"').to.eql('Комментарий_пользователя_'.concat(pm.variables.get('participator2Id')));\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'isUpdated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.isUpdated, '\"isUpdated\" must be \"false\"').to.eql(false);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'updated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('updated');\r",
              "    pm.expect(jsonData.updated, '\"updated\" must equals \"created\" field').to.eql(jsonData.created);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'author' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData.author, '\"author\" field must be \"participator_2\"').to.eql('participator_2');  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"Комментарий_пользователя_{{participator2Id}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator2Id}}/comments?eventId={{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator2Id}}",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment create by participator_1 more than 1 fail",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"Комментарий_пользователя\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator1Id}}/comments?eventId={{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator1Id}}",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment update by bad user fail",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"UPD:Комментарий_пользователя\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator1Id}}/comments/{{comment2Id}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator1Id}}",
            "comments",
            "{{comment2Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment update by participator_2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be ' + pm.variables.get('comment2Id')).to.eql(pm.variables.get('comment2Id'));\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'created' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"UPD: Комментарий_пользователя_' + pm.variables.get('participator2Id') + '\"').to.eql('UPD: Комментарий_пользователя_' + pm.variables.get('participator2Id'));\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'isUpdated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.isUpdated, '\"isUpdated\" must be \"true\"').to.eql(true);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'updated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('updated');\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'author' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData.author, '\"author\" field must be \"participator_2\"').to.eql('participator_2');  \r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "setTimeout(function(){}, 2000);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"UPD: Комментарий_пользователя_{{participator2Id}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator2Id}}/comments/{{comment2Id}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator2Id}}",
            "comments",
            "{{comment2Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment get",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be ' + pm.variables.get('comment2Id')).to.eql(pm.variables.get('comment2Id'));\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'created' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"UPD: Комментарий_пользователя_' + pm.variables.get('participator2Id') + '\"').to.eql('UPD: Комментарий_пользователя_' + pm.variables.get('participator2Id'));\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'isUpdated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.isUpdated, '\"isUpdated\" must be \"true\"').to.eql(true);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'updated' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('updated');\r",
              "    pm.expect(Date.parse(jsonData.updated), '\"updated\" must be greater than \"created\" field').to.be.above(Date.parse(jsonData.created));\r",
              "\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'author' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData.author, '\"author\" field must be \"participator_2\"').to.eql('participator_2');    \r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "setTimeout(function(){}, 1000);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator2Id}}/comments/{{comment2Id}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator2Id}}",
            "comments",
            "{{comment2Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event get with counted comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Comments must be 2\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('comments');\r",
              "    pm.expect(jsonData.comments, 'Must be 2 comments').to.eql(2);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/events/{{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "{{eventId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comments get for event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Test list comments response\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, '\"id\" must be ' + pm.variables.get('comment1Id')).to.eql(pm.variables.get('comment1Id'));\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'created' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, '\"text\" must be \"Комментарий_пользователя_' + pm.variables.get('participator1Id') + '\"').to.eql('Комментарий_пользователя_' + pm.variables.get('participator1Id'));\r",
              "});\r",
              "pm.test(\"Test user 'author' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('author');\r",
              "    pm.expect(jsonData[0].author, '\"author\" field must be \"participator_1\"').to.eql('participator_1');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/events/{{eventId}}/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "{{eventId}}",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment delete by bad user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/999/comments/{{comment1Id}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "999",
            "comments",
            "{{comment1Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment delete by bad id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{eventOwnerId}}/comments/999",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{eventOwnerId}}",
            "comments",
            "999"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment delete by author",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{participator2Id}}/comments/{{comment2Id}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{participator2Id}}",
            "comments",
            "{{comment2Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment delete by admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/{{comment1Id}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            "{{comment1Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Event get with deleted comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Test comments value\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('comments');\r",
              "    pm.expect(jsonData.comments, 'Comments must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/events/{{eventId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "{{eventId}}"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}